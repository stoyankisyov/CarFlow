// <auto-generated />
using System;
using CarFlow.Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarFlow.Infrastructure.Migrations
{
    [DbContext(typeof(CarFlowContext))]
    partial class CarFlowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.AccountFavouriteAdvertisement", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "AdvertisementId");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("AccountFavouriteAdvertisement", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.AccountRole", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRole", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Body", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Body", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.BodyVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyId")
                        .HasColumnType("int");

                    b.Property<int>("DoorCount")
                        .HasColumnType("int");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyId", "DoorCount", "SeatCount")
                        .IsUnique();

                    b.ToTable("BodyVariant", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BodyVariantId")
                        .HasColumnType("int");

                    b.Property<int>("DrivetrainId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndYear")
                        .HasColumnType("date");

                    b.Property<string>("Generation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartYear")
                        .HasColumnType("date");

                    b.Property<int>("TransmissionVariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyVariantId");

                    b.HasIndex("DrivetrainId");

                    b.HasIndex("TransmissionVariantId");

                    b.HasIndex("ModelId", "Generation", "BodyVariantId", "TransmissionVariantId", "DrivetrainId", "StartYear", "EndYear")
                        .IsUnique()
                        .HasFilter("[Generation] IS NOT NULL AND [EndYear] IS NOT NULL");

                    b.ToTable("Car", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.CarAdvertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExteriorColorId")
                        .HasColumnType("int");

                    b.Property<int>("InteriorColorId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ManufactureYear")
                        .HasColumnType("date");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerCount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("RegistrationYear")
                        .HasColumnType("date");

                    b.Property<int>("SeatMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("SubregionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(2050)
                        .HasColumnType("nvarchar(2050)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<DateOnly?>("Warranty")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CarId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("ExteriorColorId");

                    b.HasIndex("InteriorColorId");

                    b.HasIndex("SeatMaterialId");

                    b.HasIndex("SubregionId");

                    b.HasIndex("Vin")
                        .IsUnique()
                        .HasFilter("[Vin] IS NOT NULL");

                    b.ToTable("CarAdvertisement", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.CarAdvertisementFeature", b =>
                {
                    b.Property<int>("CarAdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("CarAdvertisementId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("CarAdvertisementFeature", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.CarAdvertisementImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarAdvertisementId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("CarAdvertisementId");

                    b.ToTable("CarAdvertisementImage", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Condition", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Drivetrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Drivetrain", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AspirationId")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("Displacement")
                        .HasColumnType("int");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Torque")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AspirationId");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.EngineAspiration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EngineAspiration", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.EngineConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CylinderCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "CylinderCount")
                        .IsUnique();

                    b.ToTable("EngineConfiguration", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.EuroStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("EuroStandard", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Feature", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FuelType", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("ModelVariant")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId", "Name", "ModelVariant")
                        .IsUnique()
                        .HasFilter("[ModelVariant] IS NOT NULL");

                    b.ToTable("Model", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.ModelStandardFeature", b =>
                {
                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("ModelId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ModelStandardFeature", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarAdvertisementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PromotionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarAdvertisementId");

                    b.HasIndex("PromotionTypeId");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.PromotionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Price")
                        .IsUnique();

                    b.ToTable("PromotionType", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.SeatMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SeatMaterial", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Subregion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId", "Name")
                        .IsUnique();

                    b.ToTable("Subregion", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Transmission", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.TransmissionVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GearCount")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransmissionId", "GearCount")
                        .IsUnique();

                    b.ToTable("TransmissionVariant", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.TunedCarDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarAdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarAdvertisementId")
                        .IsUnique();

                    b.ToTable("TunedCarDetail", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.CombustionEngineCar", b =>
                {
                    b.HasBaseType("CarFlow.Infrastructure.Models.Car");

                    b.Property<decimal?>("CityFuel")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<decimal?>("CombinedFuel")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("EuroStandardId")
                        .HasColumnType("int");

                    b.Property<decimal?>("HighwayFuel")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.HasIndex("EngineId");

                    b.HasIndex("EuroStandardId");

                    b.ToTable("CombustionEngineCar", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.ElectricCar", b =>
                {
                    b.HasBaseType("CarFlow.Infrastructure.Models.Car");

                    b.Property<int>("BatteryCapacity")
                        .HasColumnType("int");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int");

                    b.Property<int>("MotorCount")
                        .HasColumnType("int");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("Torque")
                        .HasColumnType("int");

                    b.ToTable("ElectricCar", (string)null);
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.AccountFavouriteAdvertisement", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Account", "Account")
                        .WithMany("AccountFavouriteAdvertisements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.CarAdvertisement", "CarAdvertisement")
                        .WithMany("AccountFavouriteAdvertisements")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CarAdvertisement");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.AccountRole", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.BodyVariant", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Body", "Body")
                        .WithMany("BodyVariants")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Car", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.BodyVariant", "BodyVariant")
                        .WithMany("Cars")
                        .HasForeignKey("BodyVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Drivetrain", "Drivetrain")
                        .WithMany("Cars")
                        .HasForeignKey("DrivetrainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.TransmissionVariant", "TransmissionVariant")
                        .WithMany("Cars")
                        .HasForeignKey("TransmissionVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BodyVariant");

                    b.Navigation("Drivetrain");

                    b.Navigation("Model");

                    b.Navigation("TransmissionVariant");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.CarAdvertisement", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Account", "Account")
                        .WithMany("CarAdvertisements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Car", "Car")
                        .WithMany("CarAdvertisements")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Condition", "Condition")
                        .WithMany("CarAdvertisements")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Color", "ExteriorColor")
                        .WithMany("CarAdvertisementExteriorColors")
                        .HasForeignKey("ExteriorColorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Color", "InteriorColor")
                        .WithMany("CarAdvertisementInteriorColors")
                        .HasForeignKey("InteriorColorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.SeatMaterial", "SeatMaterial")
                        .WithMany("CarAdvertisements")
                        .HasForeignKey("SeatMaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Subregion", "Subregion")
                        .WithMany("CarAdvertisements")
                        .HasForeignKey("SubregionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Car");

                    b.Navigation("Condition");

                    b.Navigation("ExteriorColor");

                    b.Navigation("InteriorColor");

                    b.Navigation("SeatMaterial");

                    b.Navigation("Subregion");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.CarAdvertisementFeature", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.CarAdvertisement", "CarAdvertisement")
                        .WithMany("CarAdvertisementFeature")
                        .HasForeignKey("CarAdvertisementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Feature", "Feature")
                        .WithMany("CarAdvertisementFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarAdvertisement");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.CarAdvertisementImage", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.CarAdvertisement", "CarAdvertisement")
                        .WithMany("CarAdvertisementImages")
                        .HasForeignKey("CarAdvertisementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarAdvertisement");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Engine", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.EngineAspiration", "Aspiration")
                        .WithMany("Engines")
                        .HasForeignKey("AspirationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.EngineConfiguration", "Configuration")
                        .WithMany("Engines")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.FuelType", "FuelType")
                        .WithMany("Engines")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aspiration");

                    b.Navigation("Configuration");

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Model", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.ModelStandardFeature", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Feature", "Feature")
                        .WithMany("ModelStandardFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Model", "Model")
                        .WithMany("ModelStandardFeatures")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Promotion", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.CarAdvertisement", "CarAdvertisement")
                        .WithMany("Promotions")
                        .HasForeignKey("CarAdvertisementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.PromotionType", "PromotionType")
                        .WithMany("Promotions")
                        .HasForeignKey("PromotionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarAdvertisement");

                    b.Navigation("PromotionType");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Subregion", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Region", "Region")
                        .WithMany("Subregions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.TransmissionVariant", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Transmission", "Transmission")
                        .WithMany("TransmissionVariants")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.TunedCarDetail", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.CarAdvertisement", "CarAdvertisement")
                        .WithOne("TunedCarDetail")
                        .HasForeignKey("CarFlow.Infrastructure.Models.TunedCarDetail", "CarAdvertisementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarAdvertisement");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.CombustionEngineCar", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Engine", "Engine")
                        .WithMany("CombustionEngineCars")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.EuroStandard", "EuroStandard")
                        .WithMany("CombustionEngineCars")
                        .HasForeignKey("EuroStandardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarFlow.Infrastructure.Models.Car", "IdNavigation")
                        .WithOne("CombustionEngineCar")
                        .HasForeignKey("CarFlow.Infrastructure.Models.CombustionEngineCar", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Engine");

                    b.Navigation("EuroStandard");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.ElectricCar", b =>
                {
                    b.HasOne("CarFlow.Infrastructure.Models.Car", "IdNavigation")
                        .WithOne("ElectricCar")
                        .HasForeignKey("CarFlow.Infrastructure.Models.ElectricCar", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Account", b =>
                {
                    b.Navigation("AccountFavouriteAdvertisements");

                    b.Navigation("AccountRoles");

                    b.Navigation("CarAdvertisements");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Body", b =>
                {
                    b.Navigation("BodyVariants");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.BodyVariant", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Car", b =>
                {
                    b.Navigation("CarAdvertisements");

                    b.Navigation("CombustionEngineCar");

                    b.Navigation("ElectricCar");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.CarAdvertisement", b =>
                {
                    b.Navigation("AccountFavouriteAdvertisements");

                    b.Navigation("CarAdvertisementFeature");

                    b.Navigation("CarAdvertisementImages");

                    b.Navigation("Promotions");

                    b.Navigation("TunedCarDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Color", b =>
                {
                    b.Navigation("CarAdvertisementExteriorColors");

                    b.Navigation("CarAdvertisementInteriorColors");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Condition", b =>
                {
                    b.Navigation("CarAdvertisements");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Drivetrain", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Engine", b =>
                {
                    b.Navigation("CombustionEngineCars");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.EngineAspiration", b =>
                {
                    b.Navigation("Engines");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.EngineConfiguration", b =>
                {
                    b.Navigation("Engines");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.EuroStandard", b =>
                {
                    b.Navigation("CombustionEngineCars");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Feature", b =>
                {
                    b.Navigation("CarAdvertisementFeatures");

                    b.Navigation("ModelStandardFeatures");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.FuelType", b =>
                {
                    b.Navigation("Engines");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Model", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("ModelStandardFeatures");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.PromotionType", b =>
                {
                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Region", b =>
                {
                    b.Navigation("Subregions");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.SeatMaterial", b =>
                {
                    b.Navigation("CarAdvertisements");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Subregion", b =>
                {
                    b.Navigation("CarAdvertisements");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.Transmission", b =>
                {
                    b.Navigation("TransmissionVariants");
                });

            modelBuilder.Entity("CarFlow.Infrastructure.Models.TransmissionVariant", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
